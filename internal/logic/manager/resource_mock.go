// Code generated by MockGen. DO NOT EDIT.
// Source: internal/logic/manager/resource.go

// Package manager is a generated GoMock package.
package manager

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	"github.com/vulcangz/gf2-authz/internal/lib/orm"
	"github.com/vulcangz/gf2-authz/internal/model/entity"
)

// MockResource is a mock of Resource interface.
type MockResource struct {
	ctrl     *gomock.Controller
	recorder *MockResourceMockRecorder
}

// MockResourceMockRecorder is the mock recorder for MockResource.
type MockResourceMockRecorder struct {
	mock *MockResource
}

// NewMockResource creates a new mock instance.
func NewMockResource(ctrl *gomock.Controller) *MockResource {
	mock := &MockResource{ctrl: ctrl}
	mock.recorder = &MockResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResource) EXPECT() *MockResourceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockResource) Create(identifier, kind, value string, attributes map[string]any) (*entity.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", identifier, kind, value, attributes)
	ret0, _ := ret[0].(*entity.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockResourceMockRecorder) Create(identifier, kind, value, attributes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockResource)(nil).Create), identifier, kind, value, attributes)
}

// Delete mocks base method.
func (m *MockResource) Delete(identifier string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", identifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockResourceMockRecorder) Delete(identifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockResource)(nil).Delete), identifier)
}

// GetRepository mocks base method.
func (m *MockResource) GetRepository() orm.ResourceRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository")
	ret0, _ := ret[0].(orm.ResourceRepository)
	return ret0
}

// GetRepository indicates an expected call of GetRepository.
func (mr *MockResourceMockRecorder) GetRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockResource)(nil).GetRepository))
}

// Update mocks base method.
func (m *MockResource) Update(identifier, kind, value string, attributes map[string]any) (*entity.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", identifier, kind, value, attributes)
	ret0, _ := ret[0].(*entity.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockResourceMockRecorder) Update(identifier, kind, value, attributes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockResource)(nil).Update), identifier, kind, value, attributes)
}
