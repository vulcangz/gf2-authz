// Code generated by MockGen. DO NOT EDIT.
// Source: internal/logic/manager/compiled_policy.go

// Package manager is a generated GoMock package.
package manager

import (
	"context"
	reflect "reflect"
	"testing"

	gomock "github.com/golang/mock/gomock"
	"github.com/vulcangz/gf2-authz/internal/lib/orm"
	"github.com/vulcangz/gf2-authz/internal/model/entity"
	"github.com/vulcangz/gf2-authz/internal/service"
)

// sMockCompiledPolicy is a mock of CompiledPolicy interface.
type sMockCompiledPolicy struct {
	ctrl     *gomock.Controller
	recorder *MockCompiledPolicyMockRecorder
}

// sMockCompiledPolicyMockRecorder is the mock recorder for sMockCompiledPolicy.
type MockCompiledPolicyMockRecorder struct {
	mock *sMockCompiledPolicy
}

// NewMockCompiledPolicy creates a new mock instance.
func NewMockCompiledPolicy(ctrl *gomock.Controller) *sMockCompiledPolicy {
	mock := &sMockCompiledPolicy{ctrl: ctrl}
	mock.recorder = &MockCompiledPolicyMockRecorder{mock}
	return mock
}

func init() {
	t := testing.T{}
	ctrl := gomock.NewController(&t)
	service.RegisterMockCompiledPolicy(NewMockCompiledPolicy(ctrl))
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *sMockCompiledPolicy) EXPECT() *MockCompiledPolicyMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *sMockCompiledPolicy) Create(ctx context.Context, compiledPolicy []*entity.CompiledPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", compiledPolicy)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCompiledPolicyMockRecorder) Create(ctx context.Context, compiledPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*sMockCompiledPolicy)(nil).Create), compiledPolicy)
}

// GetRepository mocks base method.
func (m *sMockCompiledPolicy) GetRepository() orm.CompiledPolicyRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository")
	ret0, _ := ret[0].(orm.CompiledPolicyRepository)
	return ret0
}

// GetRepository indicates an expected call of GetRepository.
func (mr *MockCompiledPolicyMockRecorder) GetRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*sMockCompiledPolicy)(nil).GetRepository))
}

// IsAllowed mocks base method.
func (m *sMockCompiledPolicy) IsAllowed(ctx context.Context, principalID, resourceKind, resourceValue, actionID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAllowed", principalID, resourceKind, resourceValue, actionID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAllowed indicates an expected call of IsAllowed.
func (mr *MockCompiledPolicyMockRecorder) IsAllowed(ctx context.Context, principalID, resourceKind, resourceValue, actionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAllowed", reflect.TypeOf((*sMockCompiledPolicy)(nil).IsAllowed), principalID, resourceKind, resourceValue, actionID)
}
